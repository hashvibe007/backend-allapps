import dspy
from typing import List, Dict, Any


class DocumentProcessorSignature(dspy.Signature):
    """
    Given an image of a medical document, extract structured information including document type, demographics, summary, and all specific medical entities.
    Also provide a confidence score and list any questions or uncertainties for user review.
    """

    document_image: dspy.Image = dspy.InputField(
        desc="An image of a single medical document."
    )
    detailed_analysis: str = dspy.OutputField(
        desc="Detailed analysis of the medical document. Must be semantically correct and accurate."
    )
    extracted_medicines: List[str] = dspy.OutputField(
        desc="Extracted medicines from the document. Only return valid medicine names."
    )


class PatientSignature(dspy.Signature):
    id: str = dspy.OutputField(desc="Patient ID.")
    name: str = dspy.OutputField(desc="Patient name.")
    dob: str = dspy.OutputField(desc="Date of birth.")
    age: int = dspy.OutputField(desc="Age.")
    bloodGroup: str = dspy.OutputField(desc="Blood group.")


class PrimaryAlertSignature(dspy.Signature):
    alert: str = dspy.OutputField(desc="Primary alert.")
    specialCare: str = dspy.OutputField(desc="Special care instructions.")


class ChronicConditionSignature(dspy.Signature):
    name: str = dspy.OutputField(desc="Condition name.")
    since: str = dspy.OutputField(desc="Since when.")
    status: str = dspy.OutputField(desc="Status.")
    notes: str = dspy.OutputField(desc="Notes.")


class HistoryTimelineSignature(dspy.Signature):
    date: str = dspy.OutputField(desc="Date of event.")
    event: str = dspy.OutputField(desc="Event description.")


class LabTestSignature(dspy.Signature):
    date: str = dspy.OutputField(desc="Date of test.")
    investigation: str = dspy.OutputField(desc="Investigation name.")
    result: str = dspy.OutputField(desc="Result or notes.")


class MedicationSignature(dspy.Signature):
    name: str = dspy.OutputField(desc="Medication name.")
    dosage: str = dspy.OutputField(desc="Dosage.")
    frequency: str = dspy.OutputField(desc="Frequency.")
    indication: str = dspy.OutputField(desc="Indication.")


class DoctorSignature(dspy.Signature):
    type: str = dspy.OutputField(
        desc="Type of doctor or center (e.g., Primary Oncologist, Transplant Center, etc.)"
    )
    name: str = dspy.OutputField(desc="Name of the doctor or center.")
    contact: str = dspy.OutputField(desc="Contact information.")


class EmergencyContactSignature(dspy.Signature):
    name: str = dspy.OutputField(desc="Name of the contact.")
    relation: str = dspy.OutputField(desc="Relation to the patient.")
    phone: str = dspy.OutputField(desc="Phone number.")


class FooterSignature(dspy.Signature):
    date: str = dspy.OutputField(desc="Footer date.")
    generatedBy: str = dspy.OutputField(desc="Generated by.")
    notMedicalDocument: str = dspy.OutputField(desc="Not a Medical Document label.")
    disclaimer: str = dspy.OutputField(desc="Disclaimer text.")


class MetaSignature(dspy.Signature):
    version: str = dspy.OutputField(desc="Version.")
    generated_at: str = dspy.OutputField(desc="Generated at timestamp.")
    patient_id: str = dspy.OutputField(desc="Patient ID.")
    user_id: str = dspy.OutputField(desc="User ID.")


class AyurlekhaSummarySignature(dspy.Signature):
    """
    For each action, medication, or follow-up, extract:
    - start_date (from document or context)
    - duration (if mentioned)
    - end_date (if calculable)
    - is_outdated (true if the action/medication/follow-up is no longer current as of today)
    - outdated_reason (explain why, e.g., 'Follow-up was due on 2023-05-01 and is now overdue')
    in addition to the usual summary fields.
    """

    medical_history: str = dspy.InputField(
        desc="Combined analysis and medical history for the patient."
    )
    patient: Dict[str, Any] = dspy.OutputField(desc="Patient details.")
    summary: str = dspy.OutputField(desc="Summary string.")
    primaryAlert: Dict[str, Any] = dspy.OutputField(desc="Primary alert and care.")
    chronicConditions: List[Dict[str, Any]] = dspy.OutputField(
        desc="Chronic conditions."
    )
    historyTimeline: List[Dict[str, Any]] = dspy.OutputField(desc="History timeline.")
    labTests: List[Dict[str, Any]] = dspy.OutputField(desc="Lab tests.")
    medications: List[Dict[str, Any]] = dspy.OutputField(
        desc="Medications, each as a dict with name, dosage, frequency, start_date, duration, end_date, is_outdated, outdated_reason."
    )
    doctors: List[Dict[str, Any]] = dspy.OutputField(desc="Doctors and hospitals.")
    emergencyContacts: List[Dict[str, Any]] = dspy.OutputField(
        desc="Emergency contacts."
    )
    footer: Dict[str, Any] = dspy.OutputField(desc="Footer info.")
    meta: Dict[str, Any] = dspy.OutputField(desc="Meta info.")


class DocumentMetadataSignature(dspy.Signature):
    detailed_analysis: str = dspy.InputField(
        desc="Detailed analysis of the medical document."
    )
    intelligent_name: str = dspy.OutputField(
        desc="Short, human-friendly name for the document."
    )
    category: str = dspy.OutputField(
        desc="Document type, e.g., Prescription, Lab Report, Discharge Summary."
    )
    date: str = dspy.OutputField(desc="Date of the document or event.")
    department: str = dspy.OutputField(desc="Medical department or specialty.")
    doctor_name: str = dspy.OutputField(desc="Name of the doctor.")
    patient_name: str = dspy.OutputField(desc="Name of the patient.")
    insights: list = dspy.OutputField(
        desc="List of unique, high-value findings or entities."
    )
    actions: list = dspy.OutputField(
        desc="List of actions, each as a dict with description, start_date, duration, end_date, is_outdated, outdated_reason."
    )
    medications: list = dspy.OutputField(
        desc="List of medications, each as a dict with name, dosage, frequency, start_date, duration, end_date, is_outdated, outdated_reason."
    )
    urgency: str = dspy.OutputField(desc="Urgency level, e.g., High, Medium, Low.")
    summary: str = dspy.OutputField(desc="Short summary of the document.")
    is_medical_document: bool = dspy.OutputField(
        desc="True if the document is a medical document, False otherwise."
    )
    reason: str = dspy.OutputField(
        desc="Reason why the document is not a medical document, if applicable."
    )
